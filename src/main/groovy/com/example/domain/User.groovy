package com.example.domain

import groovy.transform.ToString
import io.micronaut.data.annotation.DateCreated
import io.micronaut.data.annotation.DateUpdated

import io.micronaut.serde.annotation.Serdeable
import jakarta.persistence.FetchType
import jakarta.persistence.JoinColumn
import jakarta.persistence.JoinTable
import jakarta.persistence.ManyToMany
import jakarta.persistence.UniqueConstraint

import java.time.Instant // or java.time.LocalDateTime

import jakarta.persistence.Entity
//import jakarta.persistence.GeneratedValue
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.persistence.Version
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Column

import jakarta.validation.constraints.NotEmpty
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.NotNull

/**
 * Entity class for User. This class is the representation of the User
 * table.
 */
@Entity
@Table(name = "\"user\"") // table name is user, but we need to escape it with double quotes because it's a reserved word in H2
@ToString
@Serdeable
class User implements Serializable {
    private static final long serialVersionUID = 1L
    @Id
    //@GeneratedValue(strategy = GenerationType.AUTO)  // this strategy creates a sequence table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // this strategy uses the built-in auto generated id
    Long id  // this is the PK identified by Id and it's autogenerated

    @Version
    Long version = 0L

    @Column(nullable = true)
    String firstName // can be null or empty

    @Column(nullable = false)
    @NotEmpty
    String lastName  // cannot be null or empty

    @Column(unique=true)
    @Email(regexp = ".+[@].+[\\.].+")
    String username  // email type and unique constraint created

    // security fields
    @Column(nullable = false)
    @NotEmpty
    String password
    boolean enabled = true
    boolean accountExpired = false
    boolean accountLocked = false
    boolean passwordExpired = false

    // eager fetching roles
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "user_role",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"),
            schema = "public",
            uniqueConstraints = [
                @UniqueConstraint(
                        name = "UK_USERROLE_USERID_ROLEID_KEY",
                        columnNames = ["user_id", "role_id"]
                )
            ]
    )
    Set<Role> roles

    @DateCreated
    //Date dateCreated    // managed by the framework when the records is added
    Instant dateCreated    // managed by the framework when the records is added

    @DateUpdated
    //Date dateUpdated    // managed by the framework when the record is updated
    Instant dateUpdated    // managed by the framework when the record is updated

    @Column(columnDefinition = "Text")
    String notes    // text field... Longer than varchar(4000)
}
